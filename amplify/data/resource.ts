import { a, defineData, type ClientSchema } from '@aws-amplify/backend';

const schema = a.schema({
  Transcript: a
    .model({
      id: a.string(),
      campaign: a.string(),
      campaignId: a.integer(),
      createdAt: a.datetime(),
      updatedAt: a.datetime(),
      duration: a.integer(),
      firstname: a.string(),
      lastname: a.string(),
      leadPostDate: a.string(),
      phone: a.string(),
      pipeline_stage: a.string(),
      posted: a.string(),
      profileId: a.integer(),
      recId: a.integer(),
      recname: a.string(),
      status: a.string(),
      time: a.string(),
      tname: a.string(),
      touch: a.integer(),
      u_name: a.string(),
      // Convert objects to string JSON fields
      Disposition: a.json(), // Will store JSON string
      Transcript: a.json(), // Will store JSON string
    })
    .authorization(allow => [allow.publicApiKey()]),
});

// Used for code completion / highlighting when making requests from frontend
export type Schema = ClientSchema<typeof schema>;

// Defines the data resource to be deployed
export const data = defineData({
  schema,
  authorizationModes: {
    defaultAuthorizationMode: 'apiKey',
    apiKeyAuthorizationMode: { expiresInDays: 30 }
  }
});

// Define TypeScript interfaces for the JSON structures (for type safety)
export interface DispositionType {
  Outcome: string;
  SuggestedOutcome?: string;
}

export interface TranscriptDetailsType {
  accountId: string;
  channel: string;
  jobName: string;
  jobStatus: string;
  languageCode: string;
  conversationCharacteristics: {
    contactSummary: {
      autoGenerated: {
        overallSummary: {
          content: string;
        };
      };
    };
    interruptions: {
      totalCount: number;
      totalTimeMillis: number;
      interruptionsByInterrupter: {
        [key: string]: Array<{
          beginOffsetMillis: number;
          endOffsetMillis: number;
          durationMillis: number;
        }>;
      };
    };
    sentiment: {
      overallSentiment: { [key: string]: number };
      sentimentByPeriod: {
        [key: string]: {
          [key: string]: Array<{
            beginOffsetMillis: number;
            endOffsetMillis: number;
            score: number;
          }>;
        };
      };
    };
    talkSpeed: {
      detailsByParticipant: {
        [key: string]: {
          averageWordsPerMinute: number;
        };
      };
    };
    talkTime: {
      totalTimeMillis: number;
      detailsByParticipant: {
        [key: string]: {
          totalTimeMillis: number;
        };
      };
    };
    totalConversationDurationMillis: number;
  };
  transcript: Array<{
    beginOffsetMillis: number;
    content: string;
    endOffsetMillis: number;
    id: string;
    loudnessScores: number[];
    participantRole: string;
    sentiment: string;
  }>;
}